#! /usr/bin/perl

my $VERSION = '2018-04-10.04-40-29.EDT';

#: read a class and generate exporter strings
#: for all the included functions.

use Sort::Naturally qw(nsort);
use Pdt::SeePack qw(:all);
use Pdt::SourceEnv qw(:all);
use Pdt::Cbmap;
use strict;

# get our IDE environment variables

sourceenv("$ENV{'HOME'}/.pdtrc");

# turn off warnings (better screen transitions)

local $SIG{__WARN__} = sub { };

# the name of the executable is used in the template

my $execname = $0;
$execname =~ s/^.*\///g;

# cbexport uses no template.

my @Eclass = env2class();       # get the list of classes to process Pdt::SourceEnv
my $OUTFH  = rtfnorstdout();    # get a writable filehandle Pdt::Sourceenv

# accumulator

my @mapstatement;

my $editclass = $Eclass[ 0 ];
my $fn        = seefn($editclass);    # get the filename for the class
my @mlist     = seemethod($fn);       # read thefile and get all the methods.

foreach (@mlist) {
   next if $_ =~ /^new/;              # ignore constructors
   next if $_ =~ /^cb/;               # specific to the CB class. cb's are API exports.
   next if $_ =~ /^callback/;         # same as above
   next if $_ =~ /^do/;               # do's are local
   $_ =~ s/\s+//g;
   chomp;
   push @mapstatement, $_;
}

my $declareline = undef;

if ( scalar(@ARGV) ) {
   chomp $ARGV[ $#ARGV ];
   $declareline = 'our (foo) ;';
   my $declaresymbol = join ', ', nsort(@ARGV);
   $declareline =~ s/foo/$declaresymbol/;
}

@mapstatement = nsort(@mapstatement);

if ( defined $declareline ) {
   push @mapstatement, nsort(@ARGV);
}

my $bar        = join " ", @mapstatement;
my $cstatement = ' # (:C cbexport)';
my $ostatement = undef;

if ( defined $declareline ) {
   $ostatement = $declareline . $cstatement . "\n";
}

my $estatement = 'our @EXPORT = qw(' . $bar . ') ;' . $cstatement . "\n";
my $tstatement = 'our %EXPORT_TAGS = (\'all\' => [qw(' . $bar . ')]) ;' . $cstatement . "\n";

print $OUTFH $ostatement if ( defined $ostatement );
print $OUTFH $estatement;
print $OUTFH $tstatement;

