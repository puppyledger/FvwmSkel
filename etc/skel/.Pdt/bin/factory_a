#! /usr/bin/perl

#:
#: :F a
#:
#: Autolith Factory primitive. Reads all neighbor
#: package headers and builds accessor methods and
#: properties for all of those classes.
#:
#: It returns a container to all objects in
#: the local tree. Factories are typically only ever
#: called once, at the beginning of the program,
#: and are not called directly, but by constructing
#: a root primitive class (P: r) that returns the
#: factory instead of itself at constructor time.
#:
#: Factory code is generated fully automatically, but
#: ignores packages with the flag "# EXPORTONLY" on
#: the package line. Typically you simply delete the
#: whole  contents of this file, and rerun (F: a)
#: when new packages are added to your API.
#:
#: So:	Foo.pm # root primitive class (P: r) from which
#: 					Foo::<anything> may inherit methods.
#:
#:			Foo/Factory.pm # (F: a) API main accessor class
#: 		Foo->new() returns Foo::Factory.
#: 		Foo/Baz.pm	# autolith primitive class. (P: o)
#: 		Foo->new() ; # hands back Foo::Factory,
#: 			which contains method baz(),
#: 				which provides object Foo::Baz
#:


use Bash::Sugar ; 
use Pdt::Opthead ; 
use Sort::Naturally qw(nsort);
use Pdt::SeePack qw(:all);
use Getopt::Std ; 
use Cwd;

use Pdt::Factory_A; # for autholith classes
use Pdt::Cbmap;

use strict;

### input options (-f <editfilename> || -c <editclassname>) <Templateclass>) || 
### <none, LASTEDITFILE defined in .vimrc>)

my $_DEBUG = 0 ; 
my $OH = Pdt::Opthead->new() ; 
my ($efn,$ecl,$tfn,$vmm) = $OH->opthead2($_DEBUG) ; # edit file, edit class, temp edit file 

my $BSUGAR = Bash::Sugar->new(); 
$BSUGAR->sourceenv("$ENV{'HOME'}/.pdtrc");

my $tcl = "Pdt::Factory_A" ; 
chomp $tcl ; 
unless (length($tcl)) { warn "no template file provided?" ; sleep 2 ; die ; }

if ($_DEBUG) { warn "\nexename: $0" ; sleep 1 ; }
if ($_DEBUG) { warn "efn: $efn" ; sleep 1 ; }
if ($_DEBUG) { warn "ecl: $ecl" ; sleep 1 ; }
if ($_DEBUG) { warn "template: $tcl" ; sleep 1 ; }
if ($_DEBUG) { warn "inside vim: $vmm" ; sleep 1 ; }

# system('clear');                 # nice transitions

print "api constructor method:";
my $cm = <STDIN>;
chomp $cm;

my @eft = split(/\//, $efn) ; # filename tokens 
pop @eft ; 			# take the last one off the end 
my $searchdir = join('/',  @eft );    # the directory of the class we are editing.

unless ( -d $searchdir ) { warn "unable to find directory $searchdir" ; sleep 1 ; die ; }

# open the output file 

opendir( SD, $searchdir );
my @cl = readdir(SD);                       # file list
close(SD);

my @pl;                                     # package list

for ( my $n = 0 ; $n < scalar(@cl) ; $n++ ) {

   my $fqfn = $searchdir . '/' . $cl[ $n ] ;    # fully qualify filename

   unless ( $cl[ $n ] =~ /\.pm$/ ) {           # we don't process non packages
      splice( @cl, $n, 1 );
      $n--;
      next;
   } elsif ( $cl[ $n ] =~ /^\./ ) {            # we don't process hidden files
      splice( @cl, $n, 1 );
      $n--;
      next;
   } elsif ( $cl[ $n ] eq $efn ) {             # we don't process, if it is the file we are currently writing to
      splice( @cl, $n, 1 );
      $n--;
      next;
   } elsif ( -d $fqfn ) {                      # we don't process directories
      splice( @cl, $n, 1 );
      $n--;
      next;
   }
	
	my $packline = $BSUGAR->seepack($fqfn) ; # unmodified package line
	my $classline = $BSUGAR->fn2class($fqfn) ; # class assumed from filename
	my $ckclass = $BSUGAR->seeclass($fqfn) ; # class pulled from first line

	unless ($classline eq $ckclass) {
		warn ("$classline appears to have a improperly defined package line.") ; sleep 2 ; 
	}

	if ($packline =~ /EXPORTONLY/)  { 				# packages flagged EXPORTONLY are ignore
      splice( @cl, $n, 1 );
      $n--;
      next;
	}

   unless ( length($classline) ) {								# empty classes are not processed
      splice( @cl, $n, 1 );
      $n--;
      next;

   } elsif ( $classline eq $ecl ) {                    # double check that the class doesn't match the current edited file
      splice( @cl, $n, 1 );
      $n--;
      next;
   }

   push @pl, $classline ;
}


@pl = nsort(@pl); # list of classes

# Note: there is an idea where glue functions
# are used to by the factory only, and the
# calls should be functionally direct. Since
# there is two steps to returning an api
# and since the method call would have to
# be changed in all the subsequent code,
# it is better to just use glue objects.

my @usestatements = usestatement(@pl);
my $_usestatements = join "", @usestatements;

my @initstatements = initautolith(@pl);
my $_initstatements = join "", @initstatements;

my @callbackstatements = docbmap(@pl);
my $_callbackstatements = join "", @callbackstatements;

my @accessors = simpleaccessor(@pl);
my $_accessors = join "", @accessors;

my @aoaccessors = aoaccessor(@pl);
my $_aoaccessors = join "", @aoaccessors;

# When an api is constructed, it changes classes from
# the factory class to the root class. It should have
# a handle to find its way back, if needs be.

my $_localfactorystatement = dolocalfactorystatement($ecl);

my $rootclass = $ecl ; 
my @rtok = split(/\:\:/,$rootclass) ; 
pop @rtok ; 
$rootclass = join "::", @rtok ; 

# some of these properties are deprecated

my $FM = Pdt::Factory_A->new(
   'factoryclassname'      => $ecl,
   'usestatements'         => $_usestatements,
   'initstatements'        => $_initstatements,
   'callbackstatements'    => $_callbackstatements,
   'accessorstatements'    => $_accessors,
   'localfactorystatement' => $_localfactorystatement,
   'allobjectstatements'   => $_aoaccessors, 
	'rootclass' => $rootclass 
);

if ($vmm) {
	open OUTFH, ">$efn" ; 
	print OUTFH $FM->output();
} else {
	print $FM->output();
}

sub dolocalfactorystatement { # adds the factory handle to the api builder
   my $fcn      = shift;
   my @FCN      = split( '::', $ecl );
   my $localfcn = pop(@FCN);
   $localfcn =~ tr/A-Z/a-z/;
   $localfcn = "\n\t\$O\{\'" . $localfcn . "\'\}" . ' = $self;';
   $localfcn .= "\n\t\$O\{\'" . "__API__" . "\'\}" . ' = 1;';    # API recursion detection flag
   return ($localfcn);
}

sub simpleaccessor { # make accessor methods (will work regardless)
   my @pl = @_;
   my @cb = ();
   for ( my $n = 0 ; $n < scalar(@pl) ; $n++ ) {
      my $workingclass = $pl[ $n ];
      $workingclass =~ s/^.*\:\://g;
      $workingclass =~ tr/A-Z/a-z/;
      $cb[ $n ] = "\n" . 'sub ' . $workingclass . ' { my $self = shift; return(' . $pl[ $n ] . '->' . $cm . '(@_)) ; }';
   }
   push @cb, "\n";
   unshift @cb, "\n";
   return @cb;
}

sub aoaccessor { # 
   my @pl = @_;
   my @cb = ();
   for ( my $n = 0 ; $n < scalar(@pl) ; $n++ ) {
      my $workingclass = $pl[ $n ];
      $workingclass =~ s/^.*\:\://g;
      $workingclass =~ tr/A-Z/a-z/;
      $cb[ $n ] = "\n\t" . '$O{\'' . $workingclass . '\'} =  $self->' . $workingclass . '();';
   }
   push @cb, "\n";
   unshift @cb, "\n";
   return @cb;
}

sub initautolith { # bulk population of API handles at startup 
   my @pl = @_;
   my @cb = ();

   for ( my $n = 0 ; $n < scalar(@pl) ; $n++ ) {
		my @classtok  = split(/\:\:/,$pl[$n]) ; 		 
		my $classkey = pop(@classtok) ; 
		$classkey =~ tr/A-Z/a-z/ ; 

      $cb[ $n ] = "\n\t\t" . '$self->{'  . "\'$classkey\'" . '} = ' . $pl[ $n ] . '->' . $cm . '(@_);';
   }

   push @cb, "\n";
   unshift @cb, "\n";

   return @cb;
}

sub usestatement { # creates a block of use statements.
   my @pl = @_;
   my @cb = ();
   for ( my $n = 0 ; $n < scalar(@pl) ; $n++ ) {
      $cb[ $n ] = 'use ' . $pl[ $n ] . ';';
   }
   push @cb, "\n";
   unshift @cb, "\n";
   return @cb;
}

sub docbmap { # this is a cut and paste from cbmap
   my @pl = @_;

   my $n = 0;
   foreach (@pl) {
      $pl[ $n ] =~ s/^.*\:\://g;
      $pl[ $n ] =~ tr/A-Z/a-z/;
      $n++;
   }

   my @mlist    = @pl;
   my $mapname  = 'cbmap';
   my $execname = 'cbmap';
   my @mapstatement;
   my %COLLISION;

   # this is a cut and paste out of cbmap

   foreach (@mlist) {
      next if $_ =~ /^new/;         # ignore constructors
      next if $_ =~ /^cb/;          # specific to the CB class. cb's are API exports.
      next if $_ =~ /^callback/;    # same as above
      next if $_ =~ /^do/;          # do's are local
      next if $_ =~ /^_/;           # _'s are private
      chomp;

      my $checkvalue = $_;          # make a copy for collision checking.

      my $foo = '$self->{\'' . $mapname . '\'}->{\'' . $_ . '\'} = sub { shift ; return $self->' . $_ . '(@_) ; }' . ';';

      # flag to avoid duplicates.

      push( @mapstatement, $foo ) unless $COLLISION{$checkvalue};
      $COLLISION{$checkvalue} = 1;

   }

   @mapstatement = nsort(@mapstatement);
   my $bar = join "\n\t", @mapstatement;

   my $doc = Pdt::Cbmap->new();    # the template

   $doc->append(
      'execname'     => $execname,
      'mapname'      => $mapname,
      'mapstatement' => $bar
   );

   return $doc->output();
}

