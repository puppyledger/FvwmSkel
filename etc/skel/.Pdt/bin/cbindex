#! /usr/bin/perl

my $VERSION = '2018-04-10.04-40-57.EDT';

#: cbindex is a callback map that is useful for pluroque array type
#: objects. No permenant basis for lookup can exist, as the namespace,
#: so we have to build an index on the fly. This is not very efficient
#: and should be avoided where able.
#:
#: If the environment variable RTFN is defined, we write to the
#: named file instead of STDOUT.

use Sort::Naturally qw(nsort);
use Pdt::SeePack qw(:all);
use Pdt::SourceEnv qw(:all);
use Pdt::Cbindex;
use strict;

# get our IDE environment variables

sourceenv("$ENV{'HOME'}/.pdtrc");

# turn off warnings (better screen transitions)

# local $SIG{__WARN__} = sub {};

# the name of the executable is used in the template

my $execname = $0;
$execname =~ s/^.*\///g;

#

my $doc    = Pdt::Cbindex->new();    # the template handle
my @Eclass = env2class();            # get the list of classes to process Pdt::SourceEnv
my $OUTFH  = rtfnorstdout();         # get a writable filehandle Pdt::Sourceenv

# avoid duplication with a collision table

my %COLLISION;

# the name of the property we store callbacks in.

my $mapname = 'cbindex';

# accumulators

my @mapstatement;

die('no classes defined') unless scalar(@Eclass);

my $n = 0;

foreach my $editclass (@Eclass) {
   chomp $editclass;

   my $fn    = seefn($editclass);    # get the filename for the class
   my @mlist = seemethod($fn);       # read thefile and get all the methods.

   foreach (@mlist) {
      next if $_ =~ /^new/;          # ignore constructors
      next if $_ =~ /^cb/;           # specific to the CB class. cb's are API exports.
      next if $_ =~ /^callback/;     # same as above
      next if $_ =~ /^do/;           # do's are local
      next if $_ =~ /^_/;            # _'s are private
      chomp;

      my $checkvalue = $_;           # make a copy for collision checking.

      my $foo = "\'" . $_ . "\' " . '=> sub { shift ; return $self->' . $_ . '(@_) ; },';

      if ($n) {                      # included the imported class in the comment if imported.
         $foo = $foo . ' #' . "\t" . $editclass;
      }

      # flag to avoid duplicates.

      push( @mapstatement, $foo ) unless $COLLISION{$checkvalue};
      $COLLISION{$checkvalue} = 1;

   }

   $mapstatement[ $#mapstatement ] =~ s/\,$//;

   $n++;
}

@mapstatement = nsort(@mapstatement);
my $bar = join "\n\t", @mapstatement;

$doc->append(
   'execname'     => $execname,
   'mapname'      => $mapname,
   'mapstatement' => $bar
);

print $OUTFH $doc->output();
print $OUTFH "\n";

