package Pdt::Stdcb;    # EXPORTONLY

# #
my $VERSION = '2018-04-13.07-04-00.EDT';

# pdt uses a few callbacks in template processing. This class is
# used by pdt to process those callbacks into rule tables for
# template processing.

use Exporter;
our @ISA = qw(Exporter);

# autogenerated with :r ! cbexport

our @EXPORT = qw(pcbcascade pcbenvironment pcbquestion);                          # (:C cbexport)
our %EXPORT_TAGS = ( 'all' => [ qw(pcbcascade pcbenvironment pcbquestion) ] );    # (:C cbexport)

use strict;

# $::_BONK = 1 ;

### DETECT AND RUN TEMPLATE METHODS

# if variables defined in array returned by $T->cbenv() match
# environment variables, incorporate them into a hash and return
# the hash.
#
# return undef if none.

sub pcbenvironment {    #
   my $T      = shift;
   my $fexist = shift;

   my $ev  = [];        # list of l/c environment variable names from $T::cbenv
   my $evr = {};        # return table

   my $cbenvblock = '@$ev = $T->cbenv();';
   eval($cbenvblock);

   # warn "FOO", $T, " ", @$ev, " ", $ENV{$ev->[0]}  ;

   warn $@ if $@;
   return undef if ( length($@) );

   # warn "FOO", $T, " ", @$ev, " ", $ENV{$ev->[0]}  ;

   foreach my $k (@$ev) {

      # warn "BAR" ; warn $k ; sleep 2;
      if ( length( $ENV{$k} ) ) {
         $evr->{$k} = $ENV{$k};
      }
   }

   return $evr;
}

sub pcbquestion {    # screen a template for callbacks related to multiline questions
   my $T      = shift;
   my $fexist = shift;

   my %cbqh;

   my $cbq;
   my $tblock = '$cbq = $T->cbquestion();';
   eval($tblock);

   return \%cbqh if $@;    # blank hash if no cbquestion map exists.

   foreach my $k ( keys %$fexist ) {
      $cbqh{$k} = 1 if ( ref( $cbq->{$k} ) eq 'CODE' );
   }

   return \%cbqh;
}

sub pcbcascade {           # returns fields that exist, with valid
   my $T      = shift;
   my $fexist = shift;

   my %cbch;
   my $cbc;

   my $tblock = '$cbc = $T->cbcascade();';
   eval($tblock);

   return \%cbch if $@;    # blank hash if no cascades exist

   foreach my $k ( keys %$fexist ) {

      next unless ( length( $cbc->{$k} ) );
      my $tblock = 'use ' . $cbc->{$k} . ';';
      eval($tblock);

      if ( length($@) ) {
         next;
      }

      $cbch{$k} = 1;
   }

   return \%cbch;
}

1;
