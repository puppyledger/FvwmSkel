package Pdt::Bonk;    # EXPORTONLY (autogenerated with :P x)

#: Bonk: catagorized warnings with delay, to screen or debug
#: file usage: setbonk $hashref ; openfbonk ($fn) bonk|Bonk
#: <catgory>, <errormessage>

#: Notes: This is used by Pdt. IF YOU BREAK THIS YOU WILL SUFFER.
#: If you need to change the exports, run cbexport BEFORE deleting
#: the old cbexport line so you don't screw yourself.
#: Also print() will not dereference a glob with $$ so you have to
#: do it manually by creating a $handle.

use Exporter;
use Time::HiRes qw(sleep);    # decimalized sleep
our @ISA = qw(Exporter);

our ( $BONKDEBUG, $BONKTABLE );    # (:C cbexport)
our @EXPORT = qw(Bonk bonk closefbonk dbonk openfbonk setbonk unsetbonk $BONKDEBUG $BONKTABLE);                          # (:C cbexport)
our %EXPORT_TAGS = ( 'all' => [ qw(Bonk bonk closefbonk dbonk openfbonk setbonk unsetbonk $BONKDEBUG $BONKTABLE) ] );    # (:C cbexport)

use strict;

sub setbonk { # hashref creates our warn/nowarn table
   my $D = shift;
   if ( ref($D) eq 'HASH' ) {
      $BONKTABLE = {%$D};
   }
}

sub unsetbonk { # delete the warn/nowarn table
   $BONKTABLE = {};
}

sub bonk { # 
   my $c = shift;                                                                                                        # category

   if ( $BONKTABLE->{$c} ) {                                                                                             #
      if ( length($BONKDEBUG) ) {                                                                                        #
         open( BD, ">>$BONKDEBUG" );
         print BD "\n", @_;
         close(BD);
         sleep 0.01;

      } else {
         warn "\n", @_;
         sleep 0.01;
      }
   }

}

sub Bonk {
   my $c = shift;    # category
   if ( $BONKTABLE->{$c} ) {    #
      if ( length($BONKDEBUG) ) {    #
         open( BD, ">>$BONKDEBUG" );
         print BD "\n", @_;
         close(BD);
         sleep 3;

      } else {
         warn "\n", @_;
         sleep 3;
      }
   }
}

sub dbonk { # uncategorized bonk
   if ( length($BONKDEBUG) ) {    #
      open( BD, ">>$BONKDEBUG" );
      print BD "\n", @_;
      close(BD);
      sleep 0.01;

   } else {
      warn "\n", @_;
      sleep 0.01;
   }
}

sub openfbonk { # bonk debugs to a file
   my $bonkfn = shift;
   $BONKDEBUG = $bonkfn;
}

sub closefbonk {
   my $handle = $$BONKDEBUG;
   close($handle);
}

1;
