

__DATA_
rtemplate: interactively import text from a Base::T template,
into Vim.

Vim usage:

   R: rtemplate <Perl Class>

CLI usage:

   rtemplate -n <Perl Class>

Summary:

rtemplate uses a simple ask/answer dialog to populate values
into templates of textual data. Typically this data is some
kind of code. Templates must be based on the Base::T class.
Base::T. 

Templates: 

Template classes can be generated by using the Pdt::Base_T
template, or the shortcut executable from Vim called base_t.

Vim usage:

      R: base_t
OR:   R: rtemplate Pdt::Base_T

CLI usage:

      rtemplate -n Pdt::Base_T

Environment Variables:

rtemplate automatically interpolates environment variables
defined in $HOME/.pidevrc into templates. Do use this feature
for common values such as header comments. Note these variables
CAN collide with normal shell variables, so use adequate entropy
in your naming convention.

Input from Executables:

rtemplate does support inputing from executables. Simply use
a preceding bang ! to treat the input as a command, instead
of input. You cannot nest interactive templates inside each
other using this method.

Nesting Template Reads (Caveat!)

This does not yet work. It will require forking, and looping
into the new template in order to maintain continuity with
STDIN.

#
# rtemplate can nest. You can call rtemplate, from within rtemplate,
# but because we use unique tempfiles you will need to use the -n
# switch for the nested call, otherwise you templates will collide.
#
#  :R rtemplate <Class1>
#     a_what_is_the_airspeed_velocity?
#     :r! rtemplate -n <Class2>
#        b_of_an_unladen_swallow?
#           <answer>
#
# In the above case the output of Template2 becomes the input for property:
# a_what_is_the_airspeed_velocity in Class1.

