#! /bin/perl

# 
# fvwm-selectmenu: create fvwm menus that run a program against a 
# selection of files. 
#
# files for FvwmSkel are named: <Menuname>.<selectname>.<extension>
# by passing a block of paths, multiple directories may be searched 
# for files that are in like menus.  This allows for the culmination 
# of system and user menu scripts to be rendered at the same time. 
#
# usage: fvwm-automenu -c <command string> -m <menuname> -p <dir1>:<dir2>:<dir2>  etc. 
# 
# the directories are searched, and the scripts are ordered 
# alphanumerically. by selection name. 
#

use Cwd ;
use Getopt::Std ;
use Sort::Naturally qw(nsort) ; 

use strict ;

my %OPTS ; 
getopts('c:p:m:h', \%OPTS) ; # prefix, id 

&dohelp if exists $OPTS{'h'} ; 

my $nooptcmd = $OPTS{'c'} ; 
$nooptcmd =~ s/\s+.*//g ; # get rid of all options

die ("$nooptcmd is not an executable.") unless -x $nooptcmd ; 

my $menuname   ; 
my $scriptpath ;
my $localpath  ; 
my $P = [] ;  # paths 

die ('no paths provided') unless (length($OPTS{'p'})) ;

@$P = split /\:/, $OPTS{'p'} ; 

# warn "PATHS: ", @$P ; # the block of paths passed by the user
# warn $P->[0] ; 
# warn "foo" if (-d $P->[0]) ; 

# warn ("FOO ", $OPTS{'c'}); 

# validate and prune all passed directories. 

for (my $n = 0; $n < scalar(@$P) ; $n++) {

	# do a little sanity for stupid mistakes

	chomp $P->[$n] ; 
	$P->[$n] =~ s/[\/\s+]$//g;  # strip trailing slashes or spaces
	$P->[$n] =~ s/^\s+//g;      # strip leading spaces

	# prune tests

	unless (-d $P->[$n]) {
		# warn "not a directory: ", $P->[$n] ; 
		splice(@$P,$n,1) ; 
		$n-- ; 
	} 


}

# now we read all of the files in all of our directories, test 
# for a matching MenuName, and then fully qualify them.  

my $M = {} ;  # the menu has a hash

foreach my $p (@$P) {
	opendir(EXED,$p) || warn ("failed to opendir: $p check perms.") ; 

	my @fn = readdir EXED ; 

	for (my $n = 0; $n < scalar(@fn) ; $n++) {

		# get the fully qualified filename and 
		# tokenize menu,selection,extension
		
		my $fqfn = join '/', ($p, $fn[$n]) ; 
		my ($_m,$_s,$_x) = split(/\./,$fn[$n]) ; 

		# prune tests

		unless ($_m eq $OPTS{'m'}) {
			# warn "$fn[$n] does not match $OPTS{'m'}" ; 
			splice(@fn,$n,1) ; 
			$n-- ; 
			next  ; 
		} 
		unless (-x $fqfn ) {
			# warn "not executable:", $fn[$n] ; 
			splice(@fn,$n,1) ; 
			$n-- ; 
			next  ; 
		} 
		if (-d $fqfn) {
			# warn "is a directory:", $fn[$n] ; 
			splice(@fn,$n,1) ; 
			$n-- ; 
			next  ; 
		}

		# menu selection refs the fully qualified 
		# and validated filename

		$M->{$_s} = $fqfn ; 

		# warn ("$_s : $fqfn") ; 
	}

	closedir(EXED) ; 
}


my @menuhead  ; 
my @menuline  ; 

 @menuhead = domenuhead() ; 

foreach my $k (nsort(keys %$M)) { 
	push @menuline, domenuline($k, $M->{$k}) ; 
}

### PRINT IT 

print @menuhead ; 
print @menuline ; 
print "\n\n" ; 

### done. 

sub domenuhead { # 
	my $text = "\n\nDestroyMenu $OPTS{'m'}" . "\n" . "AddToMenu $OPTS{'m'}" ;
	return $text ; 
}

sub domenuline { # make a simple callback line 
	my $desc = shift ;
	my $fn = shift ; 
	my $text = "\n\+ \'\&" . $desc . "\' Exec $OPTS{'c'} $fn \&" ;  
  	return $text ; 
}

sub dohelp { #
	open ("__DATA__") ; 
	while (<DATA>) {
		print $_ ;
	}
	close(DATA) ; 
	exit ; 	
}

__DATA__

	fvwm-selectmenu

Create a block of menus from filenames in fvwm, linking 
using a specified command executed against the respective 
file. 

Filenames are formatted: <MenuName>.<SelectionName>.[jpg|png|etc]

The program searches through on or more specified directories 
for all files matching a specified MenuName, and creates an 
execution call or for a specified command, to run on the selected 
file. All files with matching MenuName will be included, and sorted 
in alphanumeric order. 

Since the menu script may draw from multiple directories it 
is possible to have scripts owned by multiple users populate 
the same menu. Arguments may be specified with the command 
however the command must have a fully qualified path with 
no spaces. 

skel-startmenu: A simple menu generator for Fvwm. 

usage: fvwm-selectmenu -c <command> -m <MenuName> -d <path1:path2:path3:etc> 

